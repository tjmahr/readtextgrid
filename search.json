[{"path":"https://www.tjmahr.com/readtextgrid/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://www.contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://www.tjmahr.com/readtextgrid/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://www.tjmahr.com/readtextgrid/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://www.tjmahr.com/readtextgrid/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://www.tjmahr.com/readtextgrid/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://www.tjmahr.com/readtextgrid/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2019 Tristan Mahr  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. readtextgrid Copyright (C) 2019 Tristan Mahr This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://www.tjmahr.com/readtextgrid/articles/textgrid-specification.html","id":"example--textgrid-file-contents","dir":"Articles","previous_headings":"","what":"Example .TextGrid file contents","title":"Textgrid specification","text":".TextGrid file format used Praat flexible. three different .TextGrid files representing Praat textgrid. Long format: Short format: Custom format comments noise: readtextgrid can handle three files way Praat textgrid specification simple—figure . developed readtextgrid specification reading Praat’s description format, testing various edge cases format testing whether Praat open test file. Praat handle file, supported package’s textgrid parser.","code":"File type = \"ooTextFile\" Object class = \"TextGrid\"  xmin = 0  xmax = 1  tiers? <exists>  size = 1  item []:      item [1]:         class = \"IntervalTier\"          name = \"Mary\"          xmin = 0          xmax = 1          intervals: size = 1          intervals [1]:             xmin = 0              xmax = 1              text = \"\" File type = \"ooTextFile\" Object class = \"TextGrid\"  0 1 <exists> 1 \"IntervalTier\" \"Mary\" 0 1 1 0 1 \"\" File type = \"ooTextFile\" Object class = \"TextGrid\"  ! info about the grid 0s 1s <exists> 1 ! info about the tier \"IntervalTier\" \"Mary\" 0s 1s 1 ! type, name, xmin, xmax, size 0s 1s \"\" ! interval xmin, xmax, size"},{"path":"https://www.tjmahr.com/readtextgrid/articles/textgrid-specification.html","id":"package-design","dir":"Articles","previous_headings":"","what":"Package design","title":"Textgrid specification","text":"read .TextGrid file, following: read proper character encoding tokenize file contents sequence characters list Praat strings Praat numbers identify start end tokens textgrid tier split tokens batches data assemble dataframes document concerns tokenization step. remaining parsing steps follow straightforward split-apply-combine programming R.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/articles/textgrid-specification.html","id":"documented--textgrid-file-format-specification","dir":"Articles","previous_headings":"","what":"Documented .TextGrid file format specification","title":"Textgrid specification","text":"First, let’s start Paul Boersma’s description file format. notes long format contains several comments help person read file, ultimately ignored Praat. Instead, important tokens: Praat consider data following types information file: free-standing numbers, 0 2.3 , [1] [3]; free-standing text enclosed within double quotes, \"TextGrid\" \"\" ; free-standing flags, <exists> (flag appears TextGrid files […]). list, “free-standing” means number, text flag preceded beginning file, beginning line, space, followed end file, end line, space. also mentions additional features format: ! comments: “everything follows exclamation mark line considered comment”. \"\" escapement doubling: “double quote appears text [.e., string] written doubled double quote text file.” ignore <flag> tokens anyway: “flag <exists>, tells us TextGrid contains tiers (value <absent> TextGrid contained tiers, case file end ; however, really create TextGrid objects without tiers Praat, issue can ignored).” details mostly accurate simple enough, don’t specify .1 example (Praat treat error).","code":""},{"path":"https://www.tjmahr.com/readtextgrid/articles/textgrid-specification.html","id":"our-specification-of-the--textgrid-file-format","dir":"Articles","previous_headings":"","what":"Our specification of the .TextGrid file format","title":"Textgrid specification","text":"testing, developed following specification R package. two kinds tokens: strings numbers. Strings start end \". string supposed double-quote character \" inside , double quote characters instead. textgrid interval text said “hello” string \"said \"\"hello\"\" \". Everything inside \" pair belongs string, even line breaks comments. string fully “free-standing”. preceded followed space, newline, start end file. said\"Hello\" contain string space \" character. Numbers start plus, minus digit. Decimal, hexadecimal, scientific notation supported. Fractions supported. number ending % (percentage) divided 100. Numbers use . decimal point character. .5 number doesn’t start plus, minus digit. number “left free-standing” (terminology). must preceded space newline. (Using file start doesn’t make sense boundary). valid start number, characters read sequence characters longer yield number. additional characters next space, newline, file boundary ignored. 100ms +100e1ms, example, final ms characters ignored. Praat support real numbers stranded exponent (1e). kinds numbers exception left-free-standing feature described earlier. Everything else comment ignored. differentiate two kinds comments. terminology, Praat’s. “Strong” comments start ! end newline (\\n). “Weak” comments token start like string number. long format textgrid, size = 1 two ignored weak comments (size, =) number (1). allowance characters right side numbers major difference description Praat format one used package.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/articles/textgrid-specification.html","id":"reference-r-implementation-for-textgrid-tokenization","dir":"Articles","previous_headings":"","what":"Reference R implementation for textgrid tokenization","title":"Textgrid specification","text":"Given vector characters Praat .TextGrid file, want list strings numbers contained file. example, characters short textgrid file output R-based tokenization: comments function: r_tokenize_textgrid_chars() exported supported function. needs accessed triple colon namespace operator :::. function intended implementation package converted implementation C++. keep R version around reference implementation testing current C++ implementation. Don’t use . big ideas r_tokenize_textgrid_chars() following: three special states: in_strong_comment, in_string, in_escaped_quote. determine interpret spaces, newlines, \" characters. in_strong_comment true, skip character iteration loop next see newline. in_escaped_quote true, skip next iteration loop (catch next \"). in_string true, keep collecting characters current token see closing \". states false see space newline, end current token. extract characters current token, combine single value, check value keep Praat string Praat number. reset current token position advance. Everything else book-keeping check special state initialize new token. complete code given . fairly well-commented don’t read —just knowing high-level details sufficient.","code":"tg_characters <- examples[2] |>    strsplit(\"\") |>    unlist()  tg_characters #>   [1] \"F\"  \"i\"  \"l\"  \"e\"  \" \"  \"t\"  \"y\"  \"p\"  \"e\"  \" \"  \"=\"  \" \"  \"\\\"\" \"o\"  \"o\"  #>  [16] \"T\"  \"e\"  \"x\"  \"t\"  \"F\"  \"i\"  \"l\"  \"e\"  \"\\\"\" \"\\n\" \"O\"  \"b\"  \"j\"  \"e\"  \"c\"  #>  [31] \"t\"  \" \"  \"c\"  \"l\"  \"a\"  \"s\"  \"s\"  \" \"  \"=\"  \" \"  \"\\\"\" \"T\"  \"e\"  \"x\"  \"t\"  #>  [46] \"G\"  \"r\"  \"i\"  \"d\"  \"\\\"\" \"\\n\" \"\\n\" \"0\"  \"\\n\" \"1\"  \"\\n\" \"<\"  \"e\"  \"x\"  \"i\"  #>  [61] \"s\"  \"t\"  \"s\"  \">\"  \"\\n\" \"1\"  \"\\n\" \"\\\"\" \"I\"  \"n\"  \"t\"  \"e\"  \"r\"  \"v\"  \"a\"  #>  [76] \"l\"  \"T\"  \"i\"  \"e\"  \"r\"  \"\\\"\" \"\\n\" \"\\\"\" \"M\"  \"a\"  \"r\"  \"y\"  \"\\\"\" \"\\n\" \"0\"  #>  [91] \"\\n\" \"1\"  \"\\n\" \"1\"  \"\\n\" \"0\"  \"\\n\" \"1\"  \"\\n\" \"\\\"\" \"\\\"\" \"\\n\"  tg_characters |>    readtextgrid:::r_tokenize_textgrid_chars() |>    str() #> List of 13 #>  $ : chr \"ooTextFile\" #>  $ : chr \"TextGrid\" #>  $ : num 0 #>  $ : num 1 #>  $ : num 1 #>  $ : chr \"IntervalTier\" #>  $ : chr \"Mary\" #>  $ : num 0 #>  $ : num 1 #>  $ : num 1 #>  $ : num 0 #>  $ : num 1 #>  $ : chr \"\" function(all_char) {   # The parser rules here follow the textgrid specifications   # <https://www.fon.hum.uva.nl/praat/manual/TextGrid_file_formats.html> EXCEPT   # when they contradict the behavior of Praat.exe. For example, the specs says   # the main literals are freestanding strings and numbers, where freestanding   # means that they have a whitespace or boundary (newline or file start/end).   # But Praat.exe can handle numbers like \"10.00!comment\". So, this parser   # gathers freestanding literals but only keeps ones that are strings or   # start with a valid number (the non-numeric characters are lopped off.)    in_strong_comment <- FALSE         # Comment mode: ! to new line \\n   in_string <- FALSE                 # String mode: \"Quote to quote\"   in_escaped_quote <- FALSE          # Escaped quote: \"\" inside of a string    token_start <- integer(0)          # Start of current token   values <- vector(mode = \"list\")    # Collects completed values    for (i in seq_along(all_char)) {     cur_value_ready <- length(token_start) != 0     c <- all_char[i]     c_is_whitespace <- c %in% c(\" \", \"\\n\")     c_starts_string <- c == \"\\\"\"      # Comments start with ! and end with \\n. Skip characters in this mode.     if (!in_string & c == \"!\") {       in_strong_comment <- TRUE       next     }     if (in_strong_comment) {       if (c == \"\\n\") in_strong_comment <- FALSE       next     }      # Whitespace delimits values so collect values if we see whitespace     if (c_is_whitespace & !in_string) {       # Skip whitespace if no values collected so far       if (!cur_value_ready) next        total_value <- all_char[seq(token_start, i - 1)] |>         paste0(collapse = \"\")       is_string <- all_char[token_start] == \"\\\"\" && all_char[i - 1] == \"\\\"\"        # Collect only numbers and strings       if (r_tg_parse_is_number(total_value)) {         # Keep only the numeric part.         total_value <- total_value |> r_tg_parse_extract_number()         values <- c(values, total_value)       } else if (is_string) {         values <- c(values, total_value)       }       token_start <- integer(0)       next     }      # Store character if ending an escaped quote     if (in_escaped_quote) {       in_escaped_quote <- !in_escaped_quote       next     }      # Start or close string mode if we see \"     if (c_starts_string) {       # Check for \"\" escapes       peek_c <- all_char[i + 1]       if (peek_c == \"\\\"\" & in_string) {         in_escaped_quote <- TRUE       } else {         in_string <- !in_string       }     }      if (!cur_value_ready) {       token_start <- i     }   }    values |>     lapply(r_tg_parse_convert_value) }"},{"path":"https://www.tjmahr.com/readtextgrid/articles/textgrid-specification.html","id":"c-implementation","dir":"Articles","previous_headings":"","what":"C++ implementation","title":"Textgrid specification","text":"Given simple nature R code relatively slow performance compared legacy version parser, used ChatGPT help convert R code C++ implementation built cpp11 package. tried make sure understood every line made comments help understanding. C++ code straightforward translation R version. example, part function collects tokens see space newline: details different: C++ version extracts tokens substring (.substr()) method, delays checking whether token number later , accumulates results lists (tokens tokens_is_string). underlying logic R version. C++ function takes single character value (one whole string) file contents returns list tokens file, whether token Praat string, numbers characters token form number, value token’s number: figured parse numbers C++, originally going use R code token column figure whether token legal number . ’s function returns list vectors information tokens. Back R layer, final tokens selected using really basic vector operations: important part function withr::with_locale(c(LC_NUMERIC = \"C\"), ... ) call. setting locale numbers C locale means . decimal point character, comma locales. Parsing numbers also handled C++. discovered standard library strtod() function exactly need: Interprets floating-point value byte string pointed str. Function discards whitespace characters (determined isspace) first non-whitespace character found. takes many characters possible form valid floating-point representation converts floating-point value. – https://en.cppreference.com/w/c/string/byte/strtof include additional logic make sure .4 illegal output NA_real_ missing values, otherwise, strtod() work us. One consequence approach can parse kinds numbers like hexadecimal exponents. turns Praat can also parse numbers .TextGrid file well. number-parsing logic function, can test tokens specific tokens parsed: two limitations number parser used package: support fractions percentages. (Praat .) accept stranded exponents. (Praat .) high-priority limitations find case software program writes .TextGrid files uses features.","code":"if (!in_string && is_ws(b)) {       if (have_token) {         size_t start = tok_start_byte;         size_t end   = (curr_char_byte == 0 ? 0 : prev_char_byte);         size_t len   = (end >= start) ? (end - start + 1) : 0;         if (len > 0) {           // do we have a string (start and end with \")           bool q = (static_cast<unsigned char>(src[start]) == 0x22) &&             (static_cast<unsigned char>(src[end])   == 0x22);           tokens.push_back(src.substr(start, len));           tokens_is_string.push_back(q);         }         have_token = false;       }       continue;     } examples[2] |>    readtextgrid:::cpp_tg_scan_tokens() |>    as.data.frame() #>            tokens is_string num_prefix num_value #> 1            File     FALSE          0        NA #> 2            type     FALSE          0        NA #> 3               =     FALSE          0        NA #> 4    \"ooTextFile\"      TRUE          0        NA #> 5          Object     FALSE          0        NA #> 6           class     FALSE          0        NA #> 7               =     FALSE          0        NA #> 8      \"TextGrid\"      TRUE          0        NA #> 9               0     FALSE          1         0 #> 10              1     FALSE          1         1 #> 11       <exists>     FALSE          0        NA #> 12              1     FALSE          1         1 #> 13 \"IntervalTier\"      TRUE          0        NA #> 14         \"Mary\"      TRUE          0        NA #> 15              0     FALSE          1         0 #> 16              1     FALSE          1         1 #> 17              1     FALSE          1         1 #> 18              0     FALSE          1         0 #> 19              1     FALSE          1         1 #> 20             \"\"      TRUE          0        NA readtextgrid:::tokenize_textgrid #> function (tg_text)  #> { #>     res <- withr::with_locale(c(LC_NUMERIC = \"C\"), cpp_tg_scan_tokens(tg_text)) #>     toks <- res$tokens #>     is_string <- res$is_string #>     is_number <- (res$num_prefix != 0) & !is_string #>     keep <- is_number | is_string #>     toks <- toks[keep] #>     out <- vector(\"list\", length(toks)) #>     strings <- toks[is_string[keep]] #>     strings <- substring(strings, 2L, nchar(strings) - 1L) #>     strings <- gsub(\"\\\"\\\"\", \"\\\"\", strings, fixed = TRUE) #>     out[is_string[keep]] <- strings #>     out[is_number[keep]] <- res$num_value[is_number] #>     out #> } #> <bytecode: 0x5580d88365b8> #> <environment: namespace:readtextgrid> test_nums <- c(\"+1.0\", \"000ms\", \"-2\", \"0xA\", \".5\", \"+.0\")   as.data.frame(c(   test_nums = list(test_nums),   readtextgrid:::cpp_parse_praat_numbers(test_nums) )) #>   test_nums prefix_len value #> 1      +1.0          4     1 #> 2     000ms          3     0 #> 3        -2          2    -2 #> 4       0xA          3    10 #> 5        .5          0    NA #> 6       +.0          0    NA test_nums <- c(\"1e\", \"1E\", \"20/10\", \"1000%\")  expected <- c(NA_real_, NA_real_, 2.0, 10.0)   as.data.frame(c(   test_nums = list(test_nums),   readtextgrid:::cpp_parse_praat_numbers(test_nums),   expected_value = list(expected) )) #>   test_nums prefix_len value expected_value #> 1        1e          1     1             NA #> 2        1E          1     1             NA #> 3     20/10          2    20              2 #> 4     1000%          4  1000             10"},{"path":"https://www.tjmahr.com/readtextgrid/articles/textgrid-specification.html","id":"notes-on-testing","dir":"Articles","previous_headings":"","what":"Notes on testing","title":"Textgrid specification","text":"package’s folder tests/testthat/test-data includes series .TextGrid files testing parsing functions. One , hard--parse.TextGrid, collects many edge cases can imagine. C++ implementation tested legacy parser easy long-format textgrid files pure R implementation test textgrid files, including hard--parse.TextGrid. folder tests/testthat/test-data/praat-test include tests whether Praat can open file . Files fail open start fail- files open start okay-. support syntactic features okay- files.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/articles/textgrid-specification.html","id":"notes-on-the-praat-source-code","dir":"Articles","previous_headings":"","what":"Notes on the Praat source code","title":"Textgrid specification","text":"rely Praat source code tried! Praat source code read kinds text files obvious read_textgrid()-like function parsing .TextGrid file. Still, able find numbers read text file. primitive data types Praat defined Melder folder. abcio.cpp files functions like getReal() reading float text. getReal() calls Melder_a8tof() function melder_atof.cpp convert strings numbers, function turn calls findEndOfNumericString() processes numbers character character.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tristan Mahr. Author, maintainer. Dan Villarreal. Contributor. Jonathan Washington. Contributor. Josef Fruehwald. Author.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mahr T, Fruehwald J (2025). readtextgrid: Read 'Praat' 'TextGrid' File. R package version 0.2.0, https://github.com/tjmahr/readtextgrid.","code":"@Manual{,   title = {readtextgrid: Read in a 'Praat' 'TextGrid' File},   author = {Tristan Mahr and Josef Fruehwald},   year = {2025},   note = {R package version 0.2.0},   url = {https://github.com/tjmahr/readtextgrid}, }"},{"path":"https://www.tjmahr.com/readtextgrid/index.html","id":"readtextgrid-","dir":"","previous_headings":"","what":"Read in a Praat TextGrid File","title":"Read in a Praat TextGrid File","text":"readtextgrid parses Praat textgrids tidy R dataframes.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Read in a Praat TextGrid File","text":"Simple: Minimal package two core functions (read_textgrid() read_textgrid_lines()). Tidy: Returns rectangular tibbles ready downstream processing dplyr tidyr. Flexible: Supports long short textgrid file formats. Fast: Uses compiled C++ tokenizer high-throughput parsing.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Read in a Praat TextGrid File","text":"Install readtextgrid CRAN: Development version. Install precompiled version readtextgrid R-universe:","code":"install.packages(\"readtextgrid\") install.packages(   \"readtextgrid\",    repos = c(\"https://tjmahr.r-universe.dev\", \"https://cloud.r-project.org\") )"},{"path":"https://www.tjmahr.com/readtextgrid/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"Read in a Praat TextGrid File","text":"example textgrid created Praat. created using New > Create TextGrid... default settings Praat.  textgrid bundled R package. can locate file example_textgrid(). read textgrid read_textgrid(). dataframe contains one row per annotation: one row interval interval tier one row point point tier. point tier points, represented single row NA values. columns encode following information: file filename textgrid. default column uses filename path. user can override value setting file argument read_textgrid(path, file), can useful textgrids stored speaker-specific folders. tier_num number tier (left margin Praat’s textgrid editor) tier_name name tier (right margin Praat’s textgrid editor) tier_type type tier. \"IntervalTier\" interval tiers \"TextTier\" point tiers (terminology used inside textgrid file format). tier_xmin, tier_xmax start end times tier seconds xmin, xmax start end times textgrid interval point tier annotation seconds text text annotation annotation_num number annotation tier (1 first annotation, etc.)","code":"library(readtextgrid)  # Locates path to an example textgrid bundled with this package tg <- example_textgrid()  read_textgrid(path = tg) #> # A tibble: 3 × 10 #>   file                    tier_num tier_name tier_type    tier_xmin tier_xmax #>   <chr>                      <int> <chr>     <chr>            <dbl>     <dbl> #> 1 Mary_John_bell.TextGrid        1 Mary      IntervalTier         0         1 #> 2 Mary_John_bell.TextGrid        2 John      IntervalTier         0         1 #> 3 Mary_John_bell.TextGrid        3 bell      TextTier             0         1 #>    xmin  xmax text  annotation_num #>   <dbl> <dbl> <chr>          <int> #> 1     0     1 \"\"                 1 #> 2     0     1 \"\"                 1 #> 3    NA    NA <NA>              NA"},{"path":"https://www.tjmahr.com/readtextgrid/index.html","id":"reading-in-directories-of-textgrids","dir":"","previous_headings":"","what":"Reading in directories of textgrids","title":"Read in a Praat TextGrid File","text":"Suppose data multiple speakers one folder textgrids per speaker. example, package folder called speaker_data bundled representing 5 five textgrids 2 speakers. First, create vector file-paths read R. can use purrr::map()–map read_textgrid() function paths—read textgrids R combine list single dataframe purrr::list_rbind(). note way doesn’t track speaker information. default, read_textgrid() uses file basename (file-path minus directory part) file column. can manually set file value. , use purrr::map2() map function read_textgrid(path, file) path file pairs. add speaker information dataframe manipulation functions. Another strategy read textgrid dataframes list column tidyr::unnest() .","code":"📂 speaker-data ├── 📂 speaker001 │   ├── s2T01.TextGrid │   ├── s2T02.TextGrid │   ├── s2T03.TextGrid │   ├── s2T04.TextGrid │   └── s2T05.TextGrid └── 📂 speaker002     ├── s2T01.TextGrid     ├── s2T02.TextGrid     ├── s2T03.TextGrid     ├── s2T04.TextGrid     └── s2T05.TextGrid # Get the path of the folder bundled with the package data_dir <- system.file(package = \"readtextgrid\", \"speaker-data\")  # Get the full paths to all the textgrids paths <- list.files(   path = data_dir,    pattern = \"TextGrid$\",   full.names = TRUE,    recursive = TRUE ) library(purrr)  paths |>    map(read_textgrid) |>    list_rbind() #> # A tibble: 150 × 10 #>    file           tier_num tier_name tier_type    tier_xmin tier_xmax  xmin #>    <chr>             <int> <chr>     <chr>            <dbl>     <dbl> <dbl> #>  1 s2T01.TextGrid        1 words     IntervalTier         0      1.35 0     #>  2 s2T01.TextGrid        1 words     IntervalTier         0      1.35 0.297 #>  3 s2T01.TextGrid        1 words     IntervalTier         0      1.35 0.522 #>  4 s2T01.TextGrid        1 words     IntervalTier         0      1.35 0.972 #>  5 s2T01.TextGrid        2 phones    IntervalTier         0      1.35 0     #>  6 s2T01.TextGrid        2 phones    IntervalTier         0      1.35 0.297 #>  7 s2T01.TextGrid        2 phones    IntervalTier         0      1.35 0.36  #>  8 s2T01.TextGrid        2 phones    IntervalTier         0      1.35 0.495 #>  9 s2T01.TextGrid        2 phones    IntervalTier         0      1.35 0.522 #> 10 s2T01.TextGrid        2 phones    IntervalTier         0      1.35 0.621 #>     xmax text    annotation_num #>    <dbl> <chr>            <int> #>  1 0.297 \"\"                   1 #>  2 0.522 \"bird\"               2 #>  3 0.972 \"house\"              3 #>  4 1.35  \"\"                   4 #>  5 0.297 \"sil\"                1 #>  6 0.36  \"B\"                  2 #>  7 0.495 \"ER1\"                3 #>  8 0.522 \"D\"                  4 #>  9 0.621 \"HH\"                 5 #> 10 0.783 \"AW1\"                6 #> # ℹ 140 more rows library(dplyr)  # This tells read_textgrid() to set the file column to the full path data <- map2(paths, paths, read_textgrid) |>    list_rbind() |>    mutate(     # basename() removes the folder part from a path,      # dirname() removes the file part from a path     speaker = basename(dirname(file)),     file = basename(file),   ) |>    select(     speaker, everything()   )  data #> # A tibble: 150 × 11 #>    speaker    file           tier_num tier_name tier_type    tier_xmin tier_xmax #>    <chr>      <chr>             <int> <chr>     <chr>            <dbl>     <dbl> #>  1 speaker001 s2T01.TextGrid        1 words     IntervalTier         0      1.35 #>  2 speaker001 s2T01.TextGrid        1 words     IntervalTier         0      1.35 #>  3 speaker001 s2T01.TextGrid        1 words     IntervalTier         0      1.35 #>  4 speaker001 s2T01.TextGrid        1 words     IntervalTier         0      1.35 #>  5 speaker001 s2T01.TextGrid        2 phones    IntervalTier         0      1.35 #>  6 speaker001 s2T01.TextGrid        2 phones    IntervalTier         0      1.35 #>  7 speaker001 s2T01.TextGrid        2 phones    IntervalTier         0      1.35 #>  8 speaker001 s2T01.TextGrid        2 phones    IntervalTier         0      1.35 #>  9 speaker001 s2T01.TextGrid        2 phones    IntervalTier         0      1.35 #> 10 speaker001 s2T01.TextGrid        2 phones    IntervalTier         0      1.35 #>     xmin  xmax text    annotation_num #>    <dbl> <dbl> <chr>            <int> #>  1 0     0.297 \"\"                   1 #>  2 0.297 0.522 \"bird\"               2 #>  3 0.522 0.972 \"house\"              3 #>  4 0.972 1.35  \"\"                   4 #>  5 0     0.297 \"sil\"                1 #>  6 0.297 0.36  \"B\"                  2 #>  7 0.36  0.495 \"ER1\"                3 #>  8 0.495 0.522 \"D\"                  4 #>  9 0.522 0.621 \"HH\"                 5 #> 10 0.621 0.783 \"AW1\"                6 #> # ℹ 140 more rows # Read dataframes into a list column data_nested <- tibble(   speaker = basename(dirname(paths)),   data = map(paths, read_textgrid) )  # We have one row per textgrid dataframe because `data` is a list column data_nested #> # A tibble: 10 × 2 #>    speaker    data               #>    <chr>      <list>             #>  1 speaker001 <tibble [13 × 10]> #>  2 speaker001 <tibble [15 × 10]> #>  3 speaker001 <tibble [16 × 10]> #>  4 speaker001 <tibble [12 × 10]> #>  5 speaker001 <tibble [19 × 10]> #>  6 speaker002 <tibble [13 × 10]> #>  7 speaker002 <tibble [15 × 10]> #>  8 speaker002 <tibble [16 × 10]> #>  9 speaker002 <tibble [12 × 10]> #> 10 speaker002 <tibble [19 × 10]>  # promote the nested dataframes into the main dataframe tidyr::unnest(data_nested, \"data\") #> # A tibble: 150 × 11 #>    speaker    file  tier_num tier_name tier_type tier_xmin tier_xmax  xmin  xmax #>    <chr>      <chr>    <int> <chr>     <chr>         <dbl>     <dbl> <dbl> <dbl> #>  1 speaker001 s2T0…        1 words     Interval…         0      1.35 0     0.297 #>  2 speaker001 s2T0…        1 words     Interval…         0      1.35 0.297 0.522 #>  3 speaker001 s2T0…        1 words     Interval…         0      1.35 0.522 0.972 #>  4 speaker001 s2T0…        1 words     Interval…         0      1.35 0.972 1.35  #>  5 speaker001 s2T0…        2 phones    Interval…         0      1.35 0     0.297 #>  6 speaker001 s2T0…        2 phones    Interval…         0      1.35 0.297 0.36  #>  7 speaker001 s2T0…        2 phones    Interval…         0      1.35 0.36  0.495 #>  8 speaker001 s2T0…        2 phones    Interval…         0      1.35 0.495 0.522 #>  9 speaker001 s2T0…        2 phones    Interval…         0      1.35 0.522 0.621 #> 10 speaker001 s2T0…        2 phones    Interval…         0      1.35 0.621 0.783 #> # ℹ 140 more rows #> # ℹ 2 more variables: text <chr>, annotation_num <int>"},{"path":"https://www.tjmahr.com/readtextgrid/index.html","id":"pivoting-nested-intervals-in-textgrids","dir":"","previous_headings":"","what":"Pivoting nested intervals in textgrids","title":"Read in a Praat TextGrid File","text":"textgrids , natural nesting hierarchy tiers. Intervals words tier contain intervals phones tier. often necessary group intervals parent intervals (group phones words). package provides pivot_textgrid_tiers() function convert textgrids wide format way respects nesting/hierarchy tiers. remarks: tier tiers becomes batch columns. rows words tier become batch columns words (original text value), words_xmin, words_xmax, etc. columns join_cols uniquely identify textgrid file, combination speaker file needed case different speakers file. tier names tiers given order nesting outside inside (e.g., words contain phones). Behind scenes, dplyr::left_join(..., relationship = \"one--many\") used constrain intervals combined. function also works single tiers value. case, function returns just intervals tier columns renamed prefixed.","code":"data_wide <- pivot_textgrid_tiers(   data,    tiers = c(\"words\", \"phones\"),    join_cols = c(\"speaker\", \"file\") )  data_wide #> # A tibble: 108 × 18 #>    speaker    file   words words_xmin words_xmax words_xmid words_annotation_num #>    <chr>      <chr>  <chr>      <dbl>      <dbl>      <dbl>                <int> #>  1 speaker001 s2T01… \"\"         0          0.297      0.149                    1 #>  2 speaker001 s2T01… \"bir…      0.297      0.522      0.410                    2 #>  3 speaker001 s2T01… \"bir…      0.297      0.522      0.410                    2 #>  4 speaker001 s2T01… \"bir…      0.297      0.522      0.410                    2 #>  5 speaker001 s2T01… \"hou…      0.522      0.972      0.747                    3 #>  6 speaker001 s2T01… \"hou…      0.522      0.972      0.747                    3 #>  7 speaker001 s2T01… \"hou…      0.522      0.972      0.747                    3 #>  8 speaker001 s2T01… \"\"         0.972      1.35       1.16                     4 #>  9 speaker001 s2T01… \"\"         0.972      1.35       1.16                     4 #> 10 speaker001 s2T02… \"\"         0          0.297      0.149                    1 #> # ℹ 98 more rows #> # ℹ 11 more variables: words_tier_num <int>, words_tier_type <chr>, #> #   tier_xmin <dbl>, tier_xmax <dbl>, phones <chr>, phones_xmin <dbl>, #> #   phones_xmax <dbl>, phones_xmid <dbl>, phones_annotation_num <int>, #> #   phones_tier_num <int>, phones_tier_type <chr>  # more clearly data_wide |>    select(     speaker, file, words, phones,      words_xmin, words_xmax, phones_xmin, phones_xmax   ) #> # A tibble: 108 × 8 #>    speaker    file    words phones words_xmin words_xmax phones_xmin phones_xmax #>    <chr>      <chr>   <chr> <chr>       <dbl>      <dbl>       <dbl>       <dbl> #>  1 speaker001 s2T01.… \"\"    \"sil\"       0          0.297       0           0.297 #>  2 speaker001 s2T01.… \"bir… \"B\"         0.297      0.522       0.297       0.36  #>  3 speaker001 s2T01.… \"bir… \"ER1\"       0.297      0.522       0.36        0.495 #>  4 speaker001 s2T01.… \"bir… \"D\"         0.297      0.522       0.495       0.522 #>  5 speaker001 s2T01.… \"hou… \"HH\"        0.522      0.972       0.522       0.621 #>  6 speaker001 s2T01.… \"hou… \"AW1\"       0.522      0.972       0.621       0.783 #>  7 speaker001 s2T01.… \"hou… \"S\"         0.522      0.972       0.783       0.972 #>  8 speaker001 s2T01.… \"\"    \"sp\"        0.972      1.35        0.972       1.33  #>  9 speaker001 s2T01.… \"\"    \"\"          0.972      1.35        1.33        1.35  #> 10 speaker001 s2T02.… \"\"    \"sil\"       0          0.297       0           0.297 #> # ℹ 98 more rows data |>    pivot_textgrid_tiers(     tiers = \"words\",      join_cols = c(\"speaker\", \"file\")   ) #> # A tibble: 42 × 11 #>    speaker    file   words words_xmin words_xmax words_xmid words_annotation_num #>    <chr>      <chr>  <chr>      <dbl>      <dbl>      <dbl>                <int> #>  1 speaker001 s2T01… \"\"         0          0.297      0.149                    1 #>  2 speaker001 s2T01… \"bir…      0.297      0.522      0.410                    2 #>  3 speaker001 s2T01… \"hou…      0.522      0.972      0.747                    3 #>  4 speaker001 s2T01… \"\"         0.972      1.35       1.16                     4 #>  5 speaker001 s2T02… \"\"         0          0.297      0.149                    1 #>  6 speaker001 s2T02… \"cow…      0.297      0.702      0.500                    2 #>  7 speaker001 s2T02… \"boo…      0.702      1.17       0.936                    3 #>  8 speaker001 s2T02… \"\"         1.17       1.59       1.38                     4 #>  9 speaker001 s2T03… \"\"         0          0.369      0.184                    1 #> 10 speaker001 s2T03… \"hug\"      0.369      0.657      0.513                    2 #> # ℹ 32 more rows #> # ℹ 4 more variables: words_tier_num <int>, words_tier_type <chr>, #> #   tier_xmin <dbl>, tier_xmax <dbl>"},{"path":"https://www.tjmahr.com/readtextgrid/index.html","id":"speeding-things-up","dir":"","previous_headings":"","what":"Speeding things up","title":"Read in a Praat TextGrid File","text":"thousands textgrids read? following workflow can speed things . going read textgrids parallel. two approaches: future backend furrr frontend mirai backend purrr frontend backend manages parallel computation, frontend provides syntax calling function parallelism. Approach 1: tell future use multisession plan parallelism, computations done separate R sessions background. syntax like purrr code, replace map() future_map(). Approach 2: mirai set 4 daemons (background processes), use purrr’s in_parallel() helper signal map() function run parallel. need give information needed daemons run function, 1) provide complete function definition (including function(x) ...) 2) spell package namespace readtextgrid::read_textgrid(). Another way eke performance set encoding. default, readtextgrid uses readr::guess_encoding() determine encoding textgrid reading . know encoding beforehand, can skip guessing. limited testing, found setting encoding reduce benchmark times 3–4% compared guessing encoding. , read 100 textgrids using different approaches benchmark results.","code":"library(future) library(furrr) plan(multisession, workers = 4)  data_nested <- tibble(   speaker = basename(dirname(paths)),   data = future_map(paths, read_textgrid) ) mirai::daemons(4) data_nested <- tibble(   speaker = basename(dirname(paths)),   data = map(paths, in_parallel(function(x) readtextgrid::read_textgrid(x))) ) mirai::daemons(0) paths_bench <- withr::with_seed(1, sample(paths, 100, replace = TRUE))  mirai::daemons(4) bench::mark(   lapply_guess = lapply(paths_bench, read_textgrid),   lapply_set   = lapply(paths_bench, read_textgrid, encoding = \"UTF-8\"),   future_guess = future_map(paths_bench, read_textgrid),   future_set   = future_map(paths_bench, read_textgrid, encoding = \"UTF-8\"),    mirai_guess = purrr::map(     paths_bench,      in_parallel(function(x) readtextgrid::read_textgrid(x))   ),   mirai_set = purrr::map(     paths_bench,      in_parallel(function(x) readtextgrid::read_textgrid(x, encoding = \"UTF-8\"))   ),   check = TRUE ) #> Warning: Some expressions had a GC in every iteration; so filtering is #> disabled. #> # A tibble: 6 × 6 #>   expression        min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>   <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 lapply_guess    1.17s    1.17s     0.852   13.32MB     5.96 #> 2 lapply_set   883.69ms 883.69ms     1.13     5.41MB     6.79 #> 3 future_guess 407.83ms 421.37ms     2.37   627.53KB     2.37 #> 4 future_set   356.49ms 358.09ms     2.79   627.53KB     2.79 #> 5 mirai_guess  315.85ms 338.82ms     2.95  1006.66KB     0    #> 6 mirai_set    258.63ms 259.45ms     3.85  1006.66KB     0 mirai::daemons(0)"},{"path":"https://www.tjmahr.com/readtextgrid/index.html","id":"legacy-behavior-and-supported-textgrid-formats","dir":"","previous_headings":"","what":"Legacy behavior and supported textgrid formats","title":"Read in a Praat TextGrid File","text":"original version package assumed textgrid text files followed “long” format helpful labels annotations. example, following textgrid, number label makes easy fast parse textgrid regular expressions: original version parser designed textgrid format still provided legacy_read_textgrid() legacy_read_textgrid_lines() functions. Version 0.2.0 readtextgrid added C++ based parser can handle many textgrid formats. example, can “short” format textgrids like following: “long” format textgrids outputted Praat Save > Save text file..., “short” format textgrids outputted Save > Save short textfile.... readtextgrid’s parser can also handle esoteric features like comments (start !) arbitrary text attached number, following example;: new parser uses C++ tokenization—, part scans contents character character determines whether inputs strings, numbers, skipped—much faster legacy version.","code":"File type = \"ooTextFile\" Object class = \"TextGrid\"  xmin = 0  xmax = 1  tiers? <exists>  size = 1  item []:      item [1]:         class = \"IntervalTier\"          name = \"Mary\"          xmin = 0          xmax = 1          intervals: size = 1          intervals [1]:             xmin = 0              xmax = 1              text = \"\" File type = \"ooTextFile\" Object class = \"TextGrid\"  0 1 <exists> 1 \"IntervalTier\" \"Mary\" 0 1 1 0 1 \"\" File type = \"ooTextFile\" Object class = \"TextGrid\"  ! info about the grid 0s 1s <exists> 1 ! info about the tier \"IntervalTier\" \"Mary\" 0s 1s 1 ! type, name, xmin, xmax, size 0s 1s \"\" ! interval xmin, xmax, size paths_bench <- withr::with_seed(2, sample(paths, 10, replace = TRUE))  bench::mark(   current = lapply(paths_bench, read_textgrid),   legacy = lapply(paths_bench, legacy_read_textgrid),   min_iterations = 10,    filter_gc = FALSE,   check = TRUE ) #> # A tibble: 2 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 current       114ms    123ms      8.11    1.31MB     4.86 #> 2 legacy        332ms    342ms      2.89   19.57MB     6.06"},{"path":[]},{"path":"https://www.tjmahr.com/readtextgrid/index.html","id":"helpful-columns","dir":"","previous_headings":"Other tips","what":"Helpful columns","title":"Read in a Praat TextGrid File","text":"following columns often helpful: duration interval xmid midpoint interval total_annotations total number annotations tier create :","code":"data |>   # grouping needed for counting annotations per tier per file per speaker   group_by(speaker, file, tier_num) |>   mutate(     duration = xmax - xmin,     xmid = xmin + (xmax - xmin) / 2,     total_annotations = sum(!is.na(annotation_num))   ) |>    ungroup() |>    glimpse() #> Rows: 150 #> Columns: 14 #> $ speaker           <chr> \"speaker001\", \"speaker001\", \"speaker001\", \"speaker00… #> $ file              <chr> \"s2T01.TextGrid\", \"s2T01.TextGrid\", \"s2T01.TextGrid\"… #> $ tier_num          <int> 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2… #> $ tier_name         <chr> \"words\", \"words\", \"words\", \"words\", \"phones\", \"phone… #> $ tier_type         <chr> \"IntervalTier\", \"IntervalTier\", \"IntervalTier\", \"Int… #> $ tier_xmin         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… #> $ tier_xmax         <dbl> 1.348571, 1.348571, 1.348571, 1.348571, 1.348571, 1.… #> $ xmin              <dbl> 0.000, 0.297, 0.522, 0.972, 0.000, 0.297, 0.360, 0.4… #> $ xmax              <dbl> 0.297000, 0.522000, 0.972000, 1.348571, 0.297000, 0.… #> $ text              <chr> \"\", \"bird\", \"house\", \"\", \"sil\", \"B\", \"ER1\", \"D\", \"HH… #> $ annotation_num    <int> 1, 2, 3, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 1… #> $ duration          <dbl> 0.29700000, 0.22500000, 0.45000000, 0.37657143, 0.29… #> $ xmid              <dbl> 0.148500, 0.409500, 0.747000, 1.160286, 0.148500, 0.… #> $ total_annotations <int> 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 1…"},{"path":"https://www.tjmahr.com/readtextgrid/index.html","id":"launching-praat","dir":"","previous_headings":"Other tips","what":"Launching Praat","title":"Read in a Praat TextGrid File","text":"tip written perspective Windows user uses git bash terminal. open textgrids Praat, can tell R call Praat command line. know location Praat binary though. like keep copy project directories. , assuming Praat.exe working folder, following open 10 textgrids paths Praat.","code":"system2(   command = \"./Praat.exe\",   args = c(\"--open\", paths),   wait = FALSE )"},{"path":"https://www.tjmahr.com/readtextgrid/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Read in a Praat TextGrid File","text":"readtextgrid created process data WISC Lab project. Thus, development package supported NIH R01DC009411 NIH R01DC015653. Please note ‘readtextgrid’ project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/reference/example_textgrid.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate the path of an example textgrid file — example_textgrid","title":"Locate the path of an example textgrid file — example_textgrid","text":"Locate path example textgrid file","code":""},{"path":"https://www.tjmahr.com/readtextgrid/reference/example_textgrid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate the path of an example textgrid file — example_textgrid","text":"","code":"example_textgrid(which = 1)"},{"path":"https://www.tjmahr.com/readtextgrid/reference/example_textgrid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate the path of an example textgrid file — example_textgrid","text":"index textgrid load","code":""},{"path":"https://www.tjmahr.com/readtextgrid/reference/example_textgrid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate the path of an example textgrid file — example_textgrid","text":"Path \"Mary_John_bell.TextGrid\" bundled readtextgrid package.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/reference/example_textgrid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Locate the path of an example textgrid file — example_textgrid","text":"function wrapper system.file()  locate paths bundled textgrids. files used test demonstrate functionality package. Two files included: \"Mary_John_bell.TextGrid\" - default TextGrid created Praat's Create TextGrid command. file saved UTF-8 encoding. \"utf_16_be.TextGrid\" - TextGrid IPA characters entered using Praat's IPA character selector. file saved UTF-16 encoding. \"nested-intervals.TextGrid\" - textgrid containing \"utterance\" tier, \"words\" tier, \"phones\" tier. file typical forced alignment textgrids utterances contain words contain speech segments. case, alignment made hand word phone boundaries correspond exactly.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/reference/pivot_textgrid_tiers.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot a textgrid into wide format, respecting nested tiers — pivot_textgrid_tiers","title":"Pivot a textgrid into wide format, respecting nested tiers — pivot_textgrid_tiers","text":"Pivot textgrid wide format, respecting nested tiers","code":""},{"path":"https://www.tjmahr.com/readtextgrid/reference/pivot_textgrid_tiers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot a textgrid into wide format, respecting nested tiers — pivot_textgrid_tiers","text":"","code":"pivot_textgrid_tiers(data, tiers, join_cols = \"file\")"},{"path":"https://www.tjmahr.com/readtextgrid/reference/pivot_textgrid_tiers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot a textgrid into wide format, respecting nested tiers — pivot_textgrid_tiers","text":"data textgrid dataframe created read_textgrid() tiers character vector tiers pivot wide format. tiers 1 element, tiers treated nested. example, tiers c(\"utterance\", \"word\", \"phone\"), \"utterance\" intervals contain \"word\" intervals turn contain \"phone\" intervals, output one row per \"phone\" interval include utterance_* word_* columns utterance word intervals contain phone interval. tiers ordered broadest narrowest (e.g, \"word\" preceding \"phone\"). join_cols character vector columns uniquely identify textgrid file. Defaults \"file\" columns identical values tiers read textgrid file.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/reference/pivot_textgrid_tiers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pivot a textgrid into wide format, respecting nested tiers — pivot_textgrid_tiers","text":"dataframe just intervals tiers named tiers converted wide format. Columns renamed text column pivot columns named tier names. example, text column words tier renamed words. xmax, xmin, annotation_num, tier_num, tier_type also prefixed tier name. example, xmax column words tier renamed words_xmax. additional helper column xmid added prefixed appropriately. See examples .","code":""},{"path":"https://www.tjmahr.com/readtextgrid/reference/pivot_textgrid_tiers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pivot a textgrid into wide format, respecting nested tiers — pivot_textgrid_tiers","text":"joining nested intervals, two intervals b combined row match values join_cols columns $xmin <= b$xmid b$xmid <= $xmax. , midpoint b contained inside interval .","code":""},{"path":"https://www.tjmahr.com/readtextgrid/reference/pivot_textgrid_tiers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pivot a textgrid into wide format, respecting nested tiers — pivot_textgrid_tiers","text":"","code":"data <- example_textgrid(3) |>   read_textgrid() data #> # A tibble: 17 × 10 #>    file       tier_num tier_name tier_type tier_xmin tier_xmax  xmin  xmax text  #>    <chr>         <int> <chr>     <chr>         <dbl>     <dbl> <dbl> <dbl> <chr> #>  1 nested-in…        1 words     Interval…         0      1.86 0     0.419 \"\"    #>  2 nested-in…        1 words     Interval…         0      1.86 0.419 0.761 \"hug\" #>  3 nested-in…        1 words     Interval…         0      1.86 0.761 0.854 \"\"    #>  4 nested-in…        1 words     Interval…         0      1.86 0.854 1.44  \"dad… #>  5 nested-in…        1 words     Interval…         0      1.86 1.44  1.86  \"\"    #>  6 nested-in…        2 phones    Interval…         0      1.86 0     0.419 \"sil\" #>  7 nested-in…        2 phones    Interval…         0      1.86 0.419 0.524 \"HH\"  #>  8 nested-in…        2 phones    Interval…         0      1.86 0.524 0.637 \"AH1\" #>  9 nested-in…        2 phones    Interval…         0      1.86 0.637 0.761 \"G\"   #> 10 nested-in…        2 phones    Interval…         0      1.86 0.761 0.854 \"sp\"  #> 11 nested-in…        2 phones    Interval…         0      1.86 0.854 1.05  \"D\"   #> 12 nested-in…        2 phones    Interval…         0      1.86 1.05  1.23  \"AE1\" #> 13 nested-in…        2 phones    Interval…         0      1.86 1.23  1.32  \"D\"   #> 14 nested-in…        2 phones    Interval…         0      1.86 1.32  1.44  \"IY0\" #> 15 nested-in…        2 phones    Interval…         0      1.86 1.44  1.79  \"sp\"  #> 16 nested-in…        2 phones    Interval…         0      1.86 1.79  1.86  \"\"    #> 17 nested-in…        3 utterance Interval…         0      1.86 0     1.86  \"hug… #> # ℹ 1 more variable: annotation_num <int>  # With a single tier, we get just that tier with the columns prefixed with # the tier_name pivot_textgrid_tiers(data, \"utterance\") #> # A tibble: 1 × 10 #>   file                    utterance utterance_xmin utterance_xmax utterance_xmid #>   <chr>                   <chr>              <dbl>          <dbl>          <dbl> #> 1 nested-intervals.TextG… hug daddy              0           1.86          0.932 #> # ℹ 5 more variables: utterance_annotation_num <int>, utterance_tier_num <int>, #> #   utterance_tier_type <chr>, tier_xmin <dbl>, tier_xmax <dbl> pivot_textgrid_tiers(data, \"words\") #> # A tibble: 5 × 10 #>   file               words words_xmin words_xmax words_xmid words_annotation_num #>   <chr>              <chr>      <dbl>      <dbl>      <dbl>                <int> #> 1 nested-intervals.… \"\"         0          0.419      0.210                    1 #> 2 nested-intervals.… \"hug\"      0.419      0.761      0.590                    2 #> 3 nested-intervals.… \"\"         0.761      0.854      0.808                    3 #> 4 nested-intervals.… \"dad…      0.854      1.44       1.15                     4 #> 5 nested-intervals.… \"\"         1.44       1.86       1.65                     5 #> # ℹ 4 more variables: words_tier_num <int>, words_tier_type <chr>, #> #   tier_xmin <dbl>, tier_xmax <dbl>  # With multiple tiers, intervals in one tier that contain intervals in # another tier are combined into the same row. a <- pivot_textgrid_tiers(data, c(\"utterance\", \"words\")) cols <- c(   \"utterance\", \"utterance_xmin\", \"utterance_xmax\",   \"words\", \"words_xmin\", \"words_xmax\" ) a[cols] #> # A tibble: 5 × 6 #>   utterance utterance_xmin utterance_xmax words   words_xmin words_xmax #>   <chr>              <dbl>          <dbl> <chr>        <dbl>      <dbl> #> 1 hug daddy              0           1.86 \"\"           0          0.419 #> 2 hug daddy              0           1.86 \"hug\"        0.419      0.761 #> 3 hug daddy              0           1.86 \"\"           0.761      0.854 #> 4 hug daddy              0           1.86 \"daddy\"      0.854      1.44  #> 5 hug daddy              0           1.86 \"\"           1.44       1.86   a <- pivot_textgrid_tiers(data, c(\"utterance\", \"words\", \"phones\")) cols <- c(cols, \"phones\", \"phones_xmin\", \"phones_xmax\") a[cols] #> # A tibble: 11 × 9 #>    utterance utterance_xmin utterance_xmax words   words_xmin words_xmax phones #>    <chr>              <dbl>          <dbl> <chr>        <dbl>      <dbl> <chr>  #>  1 hug daddy              0           1.86 \"\"           0          0.419 \"sil\"  #>  2 hug daddy              0           1.86 \"hug\"        0.419      0.761 \"HH\"   #>  3 hug daddy              0           1.86 \"hug\"        0.419      0.761 \"AH1\"  #>  4 hug daddy              0           1.86 \"hug\"        0.419      0.761 \"G\"    #>  5 hug daddy              0           1.86 \"\"           0.761      0.854 \"sp\"   #>  6 hug daddy              0           1.86 \"daddy\"      0.854      1.44  \"D\"    #>  7 hug daddy              0           1.86 \"daddy\"      0.854      1.44  \"AE1\"  #>  8 hug daddy              0           1.86 \"daddy\"      0.854      1.44  \"D\"    #>  9 hug daddy              0           1.86 \"daddy\"      0.854      1.44  \"IY0\"  #> 10 hug daddy              0           1.86 \"\"           1.44       1.86  \"sp\"   #> 11 hug daddy              0           1.86 \"\"           1.44       1.86  \"\"     #> # ℹ 2 more variables: phones_xmin <dbl>, phones_xmax <dbl>"},{"path":"https://www.tjmahr.com/readtextgrid/reference/read_textgrid.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a textgrid file into a tibble — read_textgrid","title":"Read a textgrid file into a tibble — read_textgrid","text":"Read textgrid file tibble","code":""},{"path":"https://www.tjmahr.com/readtextgrid/reference/read_textgrid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a textgrid file into a tibble — read_textgrid","text":"","code":"read_textgrid(path, file = NULL, encoding = NULL)  read_textgrid_lines(lines, file = NULL)  legacy_read_textgrid(path, file = NULL, encoding = NULL)  legacy_read_textgrid_lines(lines, file = NULL)"},{"path":"https://www.tjmahr.com/readtextgrid/reference/read_textgrid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a textgrid file into a tibble — read_textgrid","text":"path path textgrid file optional value use file column. read_textgrid(), default base filename input file. read_textgrid_lines(), default NA. encoding encoding textgrid. default value NULL uses readr::guess_encoding() guess encoding textgrid. encoding provided, forwarded [readr::locale()] [readr::read_lines()]. lines alternatively, lines textgrid file","code":""},{"path":"https://www.tjmahr.com/readtextgrid/reference/read_textgrid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a textgrid file into a tibble — read_textgrid","text":"tibble one row per textgrid annotation","code":""},{"path":"https://www.tjmahr.com/readtextgrid/reference/read_textgrid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a textgrid file into a tibble — read_textgrid","text":"legacy_read_textgrid functions original textgrid parsers provided package. assume TextGrid file \"long\" format textgrid; default format used \"Save text file...\" Praat. current read_textgrid() functions flexible can read \"short\" format textgrids textgrids comments. See https://www.fon.hum.uva.nl/praat/manual/TextGrid_file_formats.html description textgrid file format. Note package strictly adhere format described document. example, document says numbers freestanding (surrounded spaces string boundaries), Praat.exe can handle malformed numbers like 100ms. Therefore, tried implement parser matched Praat actually handles.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/reference/read_textgrid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a textgrid file into a tibble — read_textgrid","text":"","code":"tg <- system.file(\"Mary_John_bell.TextGrid\", package = \"readtextgrid\") read_textgrid(tg) #> # A tibble: 3 × 10 #>   file        tier_num tier_name tier_type tier_xmin tier_xmax  xmin  xmax text  #>   <chr>          <int> <chr>     <chr>         <dbl>     <dbl> <dbl> <dbl> <chr> #> 1 Mary_John_…        1 Mary      Interval…         0         1     0     1 \"\"    #> 2 Mary_John_…        2 John      Interval…         0         1     0     1 \"\"    #> 3 Mary_John_…        3 bell      TextTier          0         1    NA    NA NA    #> # ℹ 1 more variable: annotation_num <int>"},{"path":"https://www.tjmahr.com/readtextgrid/reference/readtextgrid-package.html","id":null,"dir":"Reference","previous_headings":"","what":"readtextgrid: Read in a 'Praat' 'TextGrid' File — readtextgrid-package","title":"readtextgrid: Read in a 'Praat' 'TextGrid' File — readtextgrid-package","text":"'Praat' https://www.fon.hum.uva.nl/praat/ widely used tool manipulating, annotating analyzing speech acoustic data. stores annotation data format called 'TextGrid'. package provides way read files R.","code":""},{"path":[]},{"path":"https://www.tjmahr.com/readtextgrid/reference/readtextgrid-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"readtextgrid: Read in a 'Praat' 'TextGrid' File — readtextgrid-package","text":"Maintainer: Tristan Mahr tristan.mahr@wisc.edu (ORCID) Authors: Josef Fruehwald contributors: Dan Villarreal [contributor] Jonathan Washington [contributor]","code":""},{"path":"https://www.tjmahr.com/readtextgrid/news/index.html","id":"readtextgrid-012","dir":"Changelog","previous_headings":"","what":"readtextgrid 0.1.2","title":"readtextgrid 0.1.2","text":"CRAN release: 2024-03-07 read_textgrid() now manually parses textgrids can handle short-format textgrids. (#4, #16, initial parser @JoFrhwld). Part parsing done C++ new manual parser faster legacy version. new parser documented non-package supplemental vignette called “Textgrid specification” package website. Original package functions available legacy_read_textgrid(). legacy_read_textgrid() un-escapes \"\"quote\"\" word \"quoted\" word. legacy_read_textgrid() can handle interval text line breaks . New function pivot_textgrid_tiers() pivot nested textgrid intervals wide dataframe. example, forced aligner words phones tier, can pivot words phones intervals dataframe one row per phones intervals columns words, words_xmin, words_xmax, phones, phones_xmin, phones_xmax, etc. (#10, request @stefanocoretta) Testing suite includes short-format textgrid, short-format textgrid inline comments, textgrid escaped \" characters. (@JoFrhwld) Testing suit includes adversarial textgrid challenge parsing. Support ELAN-generated textgrids. (#11, @djvill) Raised required R version 4.3.0. (April 2023)","code":""},{"path":"https://www.tjmahr.com/readtextgrid/news/index.html","id":"readtextgrid-012-1","dir":"Changelog","previous_headings":"","what":"readtextgrid 0.1.2","title":"readtextgrid 0.1.2","text":"CRAN release: 2024-03-07 Add encoding argument read_textgrid(). (#7, #8, #9, @jonorthwash) Include example UTF-16 textgrid testing. Remove magrittr dependency. (#5, @JoFrhwld)","code":""},{"path":"https://www.tjmahr.com/readtextgrid/news/index.html","id":"readtextgrid-011","dir":"Changelog","previous_headings":"","what":"readtextgrid 0.1.1","title":"readtextgrid 0.1.1","text":"CRAN release: 2020-02-17 Fixes CRAN resubmission.","code":""},{"path":"https://www.tjmahr.com/readtextgrid/news/index.html","id":"readtextgrid-010","dir":"Changelog","previous_headings":"","what":"readtextgrid 0.1.0","title":"readtextgrid 0.1.0","text":"Initial release.","code":""}]
